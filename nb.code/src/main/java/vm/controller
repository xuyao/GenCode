package $thisPackage;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import $modelClass;
import $serviceClass;
import $package.util.ConstantsUtil;
import $package.util.ConstsUtil;
import $package.util.FreemarkerStaticHtml;
import $package.util.HttpResponse;
import $package.util.JsonUtil;
import $package.util.Tools;
import $package.web.vo.JsonResult;

/**
 *	$modelNameController
 *	@author xuyao
 *
 */
@Controller
@RequestMapping(value="/$modelObj")
public class $modelNameController extends BaseController{

	@Autowired
	private $serviceName $serviceObj;
	
	private static final String TO_ADD_JSP = "redirect:/$modelObj/toadd.jspa";
	private static final String TO_EDIT_JSP = "redirect:/$modelObj/toedit.jspa";
	private static final String TO_LIST_JSP = "redirect:/$modelObj/list.jspa";
	private static final String BASE_VIEW_NAME = "$modelObj/";
	
	private static final String TEMPLATE_DIRECTORY = "/template/";
	
	/**
	 * 
	 * @Title: list 
	 * @param request
	 * @param response
	 * @return 
	 * 
	 * @throws
	 */
	@RequestMapping(value = "/list", method = {RequestMethod.POST,RequestMethod.GET})
	public ModelAndView list($modelName $modelObj, HttpServletRequest request, 
			HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();
		mav.addObject(WEB_MESSAGE_KEY,request.getParameter(WEB_MESSAGE_KEY));
		String pageNoStr = request.getParameter("pageNo");
		if(StringUtils.isNotBlank(pageNoStr)){
			pageNo = Tools.parseInt(pageNoStr);
		}
		count = $serviceObj.count($modelObj);
		int beginIndex = pageCount(count);
		$modelObj.setPage(true);
		$modelObj.setCount(count);
		$modelObj.setStart(beginIndex);
		List<$modelName> list = $serviceObj.list($modelObj);
		mav.addObject("pageNo",pageNo);
		mav.addObject("pageSize", pageSize);
		mav.addObject("count", count);
		mav.addObject("list",list);
		mav.setViewName(BASE_VIEW_NAME+"list");
		return mav;

	}
	
	/**
	 * 
	 * @Title: toAdd 
	 * @param request
	 * @param response
	 * @return 
	 * 
	 * @throws
	 */
	@RequestMapping(value = "/toadd", method = {RequestMethod.GET})
	public ModelAndView toAdd(HttpServletRequest request, 
			HttpServletResponse response) {
		ModelAndView mv = new ModelAndView();
		mv.addObject(WEB_MESSAGE_KEY,request.getParameter(WEB_MESSAGE_KEY));
		mv.setViewName(BASE_VIEW_NAME+"add");
		return mv;
	}

	/**
	 * 
	 * @Title: add 
	 * @param request
	 * @param response
	 * @param attach
	 * @return 
	 * 
	 * @throws
	 */
	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public ModelAndView add($modelName $modelObj,
			HttpServletRequest request,HttpServletResponse response) {
		ModelMap mmap = new ModelMap();
		$serviceObj.save($modelObj);
		mmap.addAttribute(WEB_MESSAGE_KEY, ConstantsUtil.MSG_CODE_OPR_SUCCESS);
		return new ModelAndView(TO_LIST_JSP,mmap);
	}
	
	/**
	 * 
	 * @Title: toEdit 
	 * @param request
	 * @param response
	 * @param id
	 * @return 
	 * 
	 * @throws
	 */
	@RequestMapping(value = "/toedit", method = {RequestMethod.GET})
	public ModelAndView toEdit(HttpServletRequest request, 
			HttpServletResponse response,@RequestParam("id") Integer id) {
		ModelAndView mv = new ModelAndView();
		$modelName obj = new $modelName();
		obj.setId(id);
		if(id!=null){
			obj = $serviceObj.get(obj);
			mv.addObject("obj", obj);
		}
		mv.addObject(WEB_MESSAGE_KEY,request.getParameter(WEB_MESSAGE_KEY));
		mv.setViewName(BASE_VIEW_NAME+"edit");
		return mv;

	}
	
	/**
	 * 
	 * @Title: edit 
	 * @param request
	 * @param response
	 * @param id
	 * @param attach
	 * @return 
	 * 
	 * @throws
	 */
	@RequestMapping(value = "/edit", method = RequestMethod.POST)
	public ModelAndView edit($modelName $modelObj, HttpServletRequest request,
					HttpServletResponse response) {
		ModelMap mmap = new ModelMap();
		$serviceObj.update($modelObj);
		mmap.addAttribute(WEB_MESSAGE_KEY, ConstantsUtil.MSG_CODE_OPR_SUCCESS);
		return new ModelAndView(TO_LIST_JSP,mmap);
	}
	
	/**
	 * 
	 * @Title: delete 
	 * @param id
	 * @param request
	 * @param response
	 * @return 
	 * 
	 * @throws
	 */
	@RequestMapping(value = "/del", method = {RequestMethod.GET})
	public ModelAndView delete(@RequestParam("id") Integer id,HttpServletRequest request, 
			HttpServletResponse response) {
		$modelName obj = new $modelName();
		obj.setId(id);
		$serviceObj.delete(obj);
		ModelMap mmap = new ModelMap();
		mmap.addAttribute(WEB_MESSAGE_KEY,ConstantsUtil.MSG_CODE_OPR_SUCCESS);
		ModelAndView mav = new ModelAndView(TO_LIST_JSP,mmap);
		return mav;

	}
	
	/**
	 * 
	 * @Title: changeSort 
	 * @param id
	 * @param request
	 * @param response 
	 * 
	 * @throws
	 */
	@RequestMapping(value="/changeSort",method = RequestMethod.POST)
	public void changeSort(@RequestParam("id") Integer id,HttpServletRequest request,HttpServletResponse response){
		JsonResult jr = new JsonResult();
		jr.setResult(false);
		String sort = request.getParameter("sort");
		if(StringUtils.isBlank(sort) || !Tools.isNumeric(sort)){
			jr.setMessage("sort is not empty! and muset be number!");
		}else{
			try {
				$modelName obj = new $modelName();
				obj.setId(id);
				obj = $serviceObj.get(obj);
//				obj.setSort(Tools.parseInt(sort));
				$serviceObj.update(obj);
				jr.setResult(true);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		HttpResponse.responseTextHtml(response, JsonUtil.getJsonString4JavaPOJO(jr));
	}
	
	//ajax fragment static 
	@RequestMapping(value = "/genhtml", method = RequestMethod.POST)
	public void genhtml(HttpServletRequest request, HttpServletResponse response) {
		$modelName obj = new $modelName();
		List<$modelName> ll = $serviceObj.list(obj);
		Map<String,Object> dataMap = new HashMap<String,Object>();
		dataMap.put("ll", ll);
		dataMap.put("path", ConstsUtil.prop.get("static_url"));
	
		String outputHtml = FreemarkerStaticHtml.generate("news.tl", dataMap,
				Tools.getAbsolutePath()+TEMPLATE_DIRECTORY);
		String htmlPath = "news.html";
		if(outputHtml==null)
			return ;
		Tools.stringToFile(outputHtml, ConstsUtil.prop.get("static_html_path")+htmlPath);
		HttpResponse.responseTextPlain(response, "sccuess!");
	}
	
}
